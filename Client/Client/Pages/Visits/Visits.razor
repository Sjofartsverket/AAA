@* @page "/visits"
@using Client.Models;
@using Client.Services.Visits;
@inherits VisitsBase

@if (isFetching is true)
{
    <h3 class="header-text">Visits</h3>
    <p><em>Loading...</em></p>
}

@if (isFetching is false && visits == null)
{
    <h3 class="header-text">Visits</h3>
    <span class="label danger">@errorMessage</span>
}

@if (isFetching is false && visits != null)
{
    <div class="d-flex justify-content-end align-items-center mb-3">
        <h3 style="margin-right:auto" class="header-text">Visits</h3>
        <span class="label danger">@errorMessage</span>
        <button style="margin: 10px" class="btn btn-sm @(!visits.Links.ContainsKey("previous") ? "btn-secondary" : "btn-primary")" @onclick="PreviousPage" disabled=@(!visits.Links.ContainsKey("previous"))>
            Previous
        </button>
        <p class="m-0 ml-2" style="margin: 20px">@($"Page {visits.PageNumber} of {visits.PageCount}")</p>
        <button style="margin: 10px" class="btn btn-sm @(!visits.Links.ContainsKey("next") ? "btn-secondary" : "btn-primary")" @onclick="NextPage" disabled=@(!visits.Links.ContainsKey("next"))>
            Next
        </button>
    </div>
    <div class="tableFixHead">
        <div class="table-responsive">
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th>SWPortVisit</th>
                        <th>Ship (IMO)</th>
                        <th>Estimated arrivaltime</th>
                        <th>Estimated departuretime</th>
                        <th>Port</th>
                        <th>Last port of call</th>
                        <th>Next port of call</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var visit in visits.Visits)
                    {
                        <tr style="cursor:pointer" class="@((visit.IsExpanded ? "expanded" : ""))" @onclick="@(async () => await OnExpandedClicked(visit))">
                            <td>
                                <span class="expand-icon">&#9656;</span>
                                @visit.Id
                            </td>
                            <td>@visit.Ship.Name (@visit.Ship.Imo)</td>
                            @if (visit.Arrival.EstimatedTime.HasValue)
                            {
                                <td>@visit.Arrival.EstimatedTime.Value.ToString("yyyy-MM-dd HH:mm")</td>
                            }
                            else
                            {
                                <td>-</td>
                            }
                            @if (visit.Departure.EstimatedTime.HasValue)
                            {
                                <td>@visit.Departure.EstimatedTime.Value.ToString("yyyy-MM-dd HH:mm")</td>
                            }
                            else
                            {
                                <td>-</td>
                            }
                            <td>@visit.Arrival.Port.PortName (@visit.Arrival.Port.Unlocode)</td>
                            <td>@visit.LastPortOfCall.PortName (@visit.LastPortOfCall.Unlocode)</td>
                            <td>@visit.NextPortOfCall.PortName (@visit.NextPortOfCall.Unlocode)</td>
                        </tr>
                        @if (visit.IsExpanded)
                        {
                            @foreach (var pilotage in visit.pilotages.pilotages)
                            {
                                <tr>
                                    <td colspan="12">
                                        <h4>Pilotage (@pilotage.VisitId)</h4>
                                        @if (pilotage.PlannedStartTime.HasValue)
                                        {
                                            <p>
                                                Planned start time: @pilotage.PlannedStartTime.Value.ToString("yyyy-MM-dd HH:mm")
                                            </p>
                                        }
                                        @if (pilotage.PlannedEndTime.HasValue)
                                        {
                                            <p>
                                                Planned end time: @pilotage.PlannedEndTime.Value.ToString("yyyy-MM-dd HH:mm")
                                            </p>
                                        }
                                        @if (pilotage.ActualStartTime.HasValue)
                                        {
                                            <p>
                                                Actual start time: @pilotage.ActualStartTime.Value.ToString("yyyy-MM-dd HH:mm")
                                            </p>
                                        }
                                        @if (pilotage.ActualEndTime.HasValue)
                                        {
                                            <p>
                                                Actual end time: @pilotage.ActualEndTime.Value.ToString("yyyy-MM-dd HH:mm")
                                            </p>
                                        }
                                        <p>
                                            IMO: @pilotage.Imo
                                        </p>
                                        <p>
                                            From point name: @pilotage.FromPointName
                                        </p>
                                        <p>
                                            To point name: @pilotage.ToPointName
                                        </p>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

 *@

@page "/visits"
@using Client.Models
@using Client.Services.Visits
@inherits VisitsBase

@if (isFetching is true)
{
    <h3 class="header-text">Visits</h3>
    <div class="d-flex align-items-center m-lg-4">
        <div class="spinner-border" role="status"></div>
    </div>
}

@if (isFetching is false && visits == null)
{
    <h3 class="header-text">Visits</h3>
    <span class="label danger">@errorMessage</span>
}

@if (isFetching is false && visits != null)
{
    <div class="d-flex justify-content-end align-items-center mb-3">
        <h3 style="margin-right:auto" class="header-text">Visits</h3>
        <span class="label danger">@errorMessage</span>
        <button style="margin: 10px" class="btn btn-sm @(!visits.Links.ContainsKey("previous") ? "btn-secondary" : "btn-primary")" @onclick="PreviousPage" disabled=@(!visits.Links.ContainsKey("previous"))>
            Previous
        </button>
        <p class="m-0 ml-2" style="margin: 20px">@($"Page {visits.PageNumber} of {visits.PageCount}")</p>
        <button style="margin: 10px" class="btn btn-sm @(!visits.Links.ContainsKey("next") ? "btn-secondary" : "btn-primary")" @onclick="NextPage" disabled=@(!visits.Links.ContainsKey("next"))>
            Next
        </button>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>SWPortVisit</th>
                    <th>Ship (IMO)</th>
                    <th>Estimated arrivaltime</th>
                    <th>Estimated departuretime</th>
                    <th>Port</th>
                    <th>Last port of call</th>
                    <th>Next port of call</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visit in visits.Visits)
                {
                    <tr style="cursor:pointer" class="@((visit.IsExpanded ? "expanded" : ""))" @onclick="@(async () => await OnExpandedClicked(visit))">
                        <td>
                            <span class="expand-icon">&#9656;</span>
                            @visit.Id
                        </td>
                        <td>@visit.Ship.Name (@visit.Ship.Imo)</td>
                        <td>@(visit.Arrival.EstimatedTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                        <td>@(visit.Departure.EstimatedTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                        <td>@visit.Arrival.Port.PortName (@visit.Arrival.Port.Unlocode)</td>
                        <td>@visit.LastPortOfCall.PortName (@visit.LastPortOfCall.Unlocode)</td>
                        <td>@visit.NextPortOfCall.PortName (@visit.NextPortOfCall.Unlocode)</td>
                    </tr>
                    @if (visit.IsExpanded)
                    {
                        @foreach (var pilotage in visit.pilotages.pilotages)
                        {
                            <tr>
                                <td colspan="8">
                                    <h4>Pilotage (@pilotage.VisitId)</h4>
                                    <div>
                                        <p>Planned start time: @(pilotage.PlannedStartTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</p>
                                        <p>Planned end time: @(pilotage.PlannedEndTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</p>
                                        <p>Actual start time: @(pilotage.ActualStartTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</p>
                                        <p>Actual end time: @(pilotage.ActualEndTime?.ToString("yyyy-MM-dd HH:mm") ?? "-")</p>
                                        <p>IMO: @pilotage.Imo</p>
                                        <p>From point name: @pilotage.FromPointName</p>
                                        <p>To point name: @pilotage.ToPointName</p>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}
